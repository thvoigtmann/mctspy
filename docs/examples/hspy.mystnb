---
jupytext:
  text_representation:
    extension: .mystnb
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.16.4
kernelspec:
  display_name: Python 3 (ipykernel)
  language: python
  name: python3
---

# Hard-Sphere System

```{code-cell} ipython3
import numpy as np
import matplotlib.pyplot as plt
```

```{code-cell} ipython3
from tqdm import tqdm
```

```{code-cell} ipython3
import mctspy as mct
```

## Nonergodicity Parameter

+++

This is the Percus-Yevick structure factor at some density slightly above the MCT glass transition:

```{code-cell} ipython3
Sq = mct.structurefactors.hssPY(0.51593)
qgrid = np.linspace(0.2,39.8,100)
sq,cq = Sq.Sq(qgrid)
plt.plot(qgrid,sq)
plt.show()
```

We define a model with this structure factor, and solve for the nonergodicity parameters.

```{code-cell} ipython3
model = mct.simple_liquid_model(Sq,qgrid)
```

```{code-cell} ipython3
nep = mct.nonergodicity_parameter (model = model, maxiter=1500)
nep.solve()
```

We also attach a tagged-particle model to calculate its NEP. Note that the direct correlation function is taken from `mctspy.structurefactors.hssPYtagged` which allows to specify a different size of the tracer. Since we do not use that here, we could have also just specified the same structure-factor object as above.

```{code-cell} ipython3
cs = mct.structurefactors.hssPYtagged(phi=Sq.phi,delta=1)
model_s = mct.tagged_particle_model (model, cs=cs, D0s=1)
nep_s = mct.nonergodicity_parameter (model = model_s, maxiter=1500)
nep_s.solve()
```

Plot the nonergodicity parameters of the hard-sphere model. Note that we omit the first point, since it is known empirically that for the standard wave-number grid in bipolar coordinates, the first few points are rather inaccurate.

```{code-cell} ipython3
plt.plot(nep.model.q[1:], nep.f[1:], label='HSS (PY)')
plt.plot(nep_s.model.q[1:], nep_s.f[1:], label='tagged particle')
plt.xlabel(r'$qd$')
plt.ylabel(r'$f(q)$, $f^s(q)$')
plt.legend()
plt.show()
```

## Critical Point

+++

Let us determine the MCT glass-transition point for the hard-sphere model. The `mctspy.util.evscan` function implements the tool to iteratively search for MCT critical points, for models where the calculation of the critical eigenvalues is implemented. The method is a somewhat adapted bisection search that is optimized to find liquid-glass or glass-glass transitions. We simply need to define a function that calls the model's NEP solver and returns the eigenvalue object. (Note that the value of `maxiter` should be increased if higher accuracy is desired.)

```{code-cell} ipython3
def calc_ev(phi):
    Sq = mct.structurefactors.hssPY(phi)
    model = mct.simple_liquid_model (Sq, qgrid)
    nep = mct.nonergodicity_parameter (model = model)
    nep.solve()
    ev = mct.eigenvalue(nep)
    ev.solve()
    return ev
phis, evs = mct.util.evscan(0.51,0.52,calc_ev,eps=1e-8)
```

The value of the critical point given in Franosch et al 1997 is $\varphi_c=0.51591213(1)$.

```{code-cell} ipython3
# The following should print phi_c = 0.51591214(1), lambda = 0.735, ev = 0.999844
p=np.argmax([ev.eval for ev in evs])
print("phi_c = {:.8f}(1), lambda = {:.3f}, ev = {:.6f}".format(phis[p],evs[p].lam,evs[p].eval))
```

```{code-cell} ipython3
hss_c = evs[p]
```

Compare to Fig.2 in Franosch et al, PRE 55, 7153 (1997). The critical amplitude there is defined as $h_q=(1-f_q^c)^2e_q$.

```{code-cell} ipython3
plt.plot(qgrid,hss_c.nep.f,label=r'$f_q$')
plt.plot(qgrid,hss_c.e*(1-hss_c.nep.f)**2,label=r'$h_q$')
plt.plot(qgrid,hss_c.ehat,label=r'$\hat e_q$')
plt.legend()
plt.xlabel(r'$qd$')
plt.show()
```

## Dynamics

+++

We now specify a packing fraction somewhat below the ciritcal point and solve for the dynamical correlation function.

```{code-cell} ipython3
Sq = mct.structurefactors.hssPY(0.515)
model = mct.simple_liquid_model(Sq,qgrid)
phi = mct.correlator (model = model, store=True)
```

```{code-cell} ipython3
pbar = tqdm(total=phi.blocks+1)
phi.solve_all(callback=lambda d,bs2,bs,c: pbar.update(1))
pbar.close()
```

Pick a few typical wave numbers and plot the result:

```{code-cell} ipython3
qvals = [3.4,7.4,12.2]
qis = np.array([np.nonzero(np.isclose(qgrid,qval)) for qval in qvals],dtype=int).reshape(-1)
```

```{code-cell} ipython3
for qi in qis:
    plt.plot(phi.t, phi.phi[:,qi], label=r'$q = {:.1f}$'.format(qgrid[qi]))
plt.xscale('log')
plt.xlabel(r'$t$')
plt.ylabel(r'$\phi(q,t)$')
plt.legend()
plt.show()
```

Since we have stored the solutions and the nonergodicity parameters, it is relatively easy to extract, for example, the structural relaxation times:

```{code-cell} ipython3
tau_indices = phi.phi.shape[0] - np.sum(phi.phi/nep.f<=0.1,axis=0)
tau_indices[tau_indices>=phi.phi.shape[0]] = -1
tau = phi.t[tau_indices]
plt.plot(model.q,tau)
plt.yscale('log')
plt.xlabel(r'$qd$')
plt.ylabel(r'$\tau_q$')
plt.show()
```

Let us add tagged-particle dynamics. This uses the fact that the collective dynamics has been calculated and stored above, and the solver can use this cached solution.

```{code-cell} ipython3
cs = mct.structurefactors.hssPYtagged(phi=Sq.phi,delta=1)
model_s = mct.tagged_particle_model (model, cs=cs, D0s=1)
phi_s = mct.correlator (model = model_s, base=phi, store = True)
correlators = mct.CorrelatorStack([phi,phi_s])
```

The tagged-particle correlator also allows to calculate the mean-squared displacement (MSD), and the non-Gaussian parameter (NGP). These essentially arise from the first two leading orders of a small-$q$ expansion of the memory kernel, which is implemented as separate models.

```{code-cell} ipython3
model_s0 = mct.tagged_particle_q0 (model_s)
msd = mct.mean_squared_displacement (model = model_s0, base=phi_s, store=True)
correlators.append(msd)
```

```{code-cell} ipython3
model_ngp = mct.tagged_particle_ngp (model_s0)
ngp = mct.non_gaussian_parameter (model = model_ngp, base=msd, store=True)
correlators.append(ngp)
```

Here, the tagged-particle correlator, MSD, and NGP are solved for:

```{code-cell} ipython3
pbar = tqdm(total=phi.blocks+1)
correlators.solve_all(callback=lambda d,bs2,bs,c: pbar.update(1))
pbar.close()
```

The MSD shows the familiar pattern of short-time diffusion, intermediate cage-induced transient subdiffusion, and long-time diffusion:

```{code-cell} ipython3
plt.plot(msd.t, msd.phi[:,0])
plt.plot(msd.t, 6*msd.t, color='black', linestyle='dashed')
plt.xscale('log')
plt.yscale('log')
plt.xlabel(r'$t$')
plt.ylabel(r'$\delta r^2(t)$')
plt.show()
```

The non-Gaussian parameter:

```{code-cell} ipython3
plt.plot(ngp.t[ngp.t>1e-5], (ngp.phi[:,0][ngp.t>1e-5]/ngp.phi[:,1][ngp.t>1e-5]**2 - 1), label='NGP')
plt.xscale('log')
plt.legend()
plt.xlabel(r'$t$')
plt.ylabel(r'$\alpha_2(t)$')
plt.show()
```

With the tagged-particle solution at hand, we can also update the relaxation-time plot:

```{code-cell} ipython3
for corr,f in [(phi,nep.f),(phi_s,nep_s.f)]:
    tau_indices = corr.phi.shape[0] - np.sum(corr.phi/f<=0.01,axis=0)
    tau_indices[tau_indices>=corr.phi.shape[0]] = -1
    tau = corr.t[tau_indices]
    plt.plot(model.q[1:],tau[1:])
plt.yscale('log')
plt.xlabel(r'$qd$')
plt.ylabel(r'$\tau_q$, $\tau^s_q$')
plt.show()
```

```{code-cell} ipython3

```
