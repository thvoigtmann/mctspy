---
jupytext:
  text_representation:
    extension: .mystnb
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.16.4
kernelspec:
  display_name: Python 3 (ipykernel)
  language: python
  name: python3
mystnb:
  execution_timeout: -1
---

# Stochastic Beta-Relaxation Theory

```{code-cell} ipython3
import numpy as np
import matplotlib.pyplot as plt
```

```{code-cell} ipython3
from tqdm import tqdm
```

```{code-cell} ipython3
import mctspy as mct
```

```{code-cell} ipython3
rng = np.random.default_rng()
```

## Spatially dependent solution

+++

The equations that we solve are
\begin{equation} \sigma(x) + \alpha\nabla^2 g(x,t) + \lambda g(x,t)^2
    = \frac{d}{dt}\int_0^tg(x,t-t')g(x,t')\,dt' \end{equation}

+++

We test the solution on a two-dimensional lattice with size $M\times M$:

```{code-cell} ipython3
M, dim = 30, 2
Dsigma = 1.
```

Generate a Gaussian-distributed $\sigma(x)$ field with the given mean. We draw $M^d$ samples with given variance, and by subtracting the numerical mean from each, we make sure that the sum of all numerical values is exactly the given $\sigma$ mean.

```{code-cell} ipython3
sigma = -1.0
s = rng.normal(loc=sigma, scale=Dsigma,size=(M,)*dim)
s += sigma - np.mean(s)
print(np.min(s))
```

```{code-cell} ipython3
g = mct.beta_scaling_function (lam=0.74, sigma=s, M=M, dim=dim, alpha=0.1, blocks=100, store=True)
g0 = mct.beta_scaling_function (lam=0.74, sigma=sigma, M=1, blocks=100, store=True)
```

```{code-cell} ipython3
correlators = mct.CorrelatorStack([g,g0])
```

Solve the SBR equations. Note that we employ a stopping condition: we stop the solution as soon as all beta-correlators have reached the value of -1.

```{code-cell} ipython3
pbar = tqdm(total=g.blocks+1)
correlators.solve_all(callback=lambda d, bs2, bs, c: pbar.update(1),stop_condition=lambda c:(c.phi_[-1]<-1).all())
pbar.close()
```

```{code-cell} ipython3
a, b = mct.util.exponents(g.lambda_)
```

```{code-cell} ipython3
valid = g.t>0
valid0 = g0.t>0
```

As expected, a wide distribution around the mean emerges. The mean over the SBR correlators deviates a little from the standard $\beta$-scaling correlator.

```{code-cell} ipython3
plt.plot(g.t[valid],g.phi[valid].reshape(g.t[valid].shape[0],-1))
plt.plot(g.t[valid],np.mean(g.phi[valid].reshape(g.t[valid].shape[0],-1), axis=-1), color='black', linewidth=5,label='SBR average')
plt.plot(g0.t[valid0],g0.phi[valid0,0], color='black', linewidth=3, linestyle='dashed',label='standard beta theory')
plt.xscale('log')
plt.xlim(1e-4,g.t[valid][-1])
plt.ylim(-20,20)
plt.xlabel(r'$t$')
plt.ylabel(r'$g_x(t)$')
plt.legend()
plt.show()
```

We calculate for further discussion below the von-Schweidler amplitudes.

```{code-cell} ipython3
Blam = np.mean(g.phi[valid][-50:,:,:]*np.power(g.t[valid][-50:],-b)[:,None,None],axis=0)
```

```{code-cell} ipython3
np.mean(Blam),np.std(Blam),np.std(Blam)/np.mean(Blam)
```

```{code-cell} ipython3
mct.util.Blambda(g.lambda_)
```

We now repeat the calculation in the glass, with the same $\sigma$-distribution (just with flipped sign).

(The correlator values are overwritten to save a bit of memory.)

```{code-cell} ipython3
g = mct.beta_scaling_function (lam=0.74, sigma=-s, M=M, dim=dim, alpha=0.1, blocks=100, store=True)
g0 = mct.beta_scaling_function (lam=0.74, sigma=-sigma, M=1, blocks=100, store=True)
```

```{code-cell} ipython3
correlators = mct.CorrelatorStack([g,g0])
```

```{code-cell} ipython3
pbar = tqdm(total=g.blocks+1)
correlators.solve_all(callback=lambda d, bs2, bs, c: pbar.update(1),stop_condition=lambda c:False and c==g0 or (c.phi_[-1]<-1).all())
pbar.close()
```

```{code-cell} ipython3
valid = g.t>0
valid0 = g0.t>0
```

```{code-cell} ipython3
plt.plot(g.t[valid],g.phi[valid].reshape(g.t[valid].shape[0],-1))
plt.plot(g.t[valid],np.mean(g.phi[valid].reshape(g.t[valid].shape[0],-1), axis=-1), color='black', linewidth=5,label='SBR average')
plt.plot(g0.t[valid0],g0.phi[valid0,0], color='black', linewidth=3, linestyle='dashed',label='standard beta theory')
plt.xscale('log')
plt.xlim(1e-4,g.t[valid][-1])
plt.ylim(-20,20)
plt.xlabel(r'$t$')
plt.ylabel(r'$g_x(t)$')
plt.legend()
plt.show()
```

A strong point of SBR is that also in the glass, we get non-exponential relaxation, because all the correlators follow the von Schweidler law. This is best seen in a log-log representation:

```{code-cell} ipython3
plt.plot(g.t[valid],np.abs(g.phi[valid].reshape(g.t[valid].shape[0],-1)))
plt.plot(g.t[valid],np.power(g.t[valid],b),linestyle='dashed',color='black')
plt.xscale('log')
plt.yscale('log')
plt.xlim(1e-4,g.t[valid][-1])
plt.show()
```

```{code-cell} ipython3
Blamglass = np.mean(g.phi[valid][-50:,:,:]*np.power(g.t[valid][-50:],-b)[:,None,None],axis=0)
```

```{code-cell} ipython3
np.mean(Blamglass),np.std(Blamglass),np.std(Blamglass)/np.mean(Blamglass)
```

In the following, we plot the von-Schweidler amplitude field (as a function of grid position in the 2d lattice) for the liquid (left) and for the glass (right). The glass is obviously different because the distribution is much more heterogeneous. As the values printed above show, the stddev relative to the mean is much larger than in the liquid.

```{code-cell} ipython3
x_, y_  = np.meshgrid(np.arange(M),np.arange(M))
fig, ax = plt.subplots(ncols=2,figsize=(16,12),subplot_kw=dict(projection='3d'))
ax[0].set_title('liquid')
ax[0].plot_surface(x_, y_, -Blam)
ax[1].set_title('glass')
ax[1].plot_surface(x_, y_, -Blamglass)
plt.show()
```

```{code-cell} ipython3
tau_g = g.phi.shape[0] - np.sum(g.phi<-1,axis=0)
```

```{code-cell} ipython3
np.std(tau_g)/np.mean(tau_g)
```

## Correlation Length

```{code-cell} ipython3
import scipy.signal
```

We solve SBR for a range of mean $\sigma$ values and calculate the $B_\lambda(x)$ profiles for each point in order to characterize its statistical evolution as a function of $\sigma$.

```{code-cell} ipython3
sigmarange = np.linspace(-1,1,21)
l = 0.74
a, b = mct.util.exponents(l)
Bvalues = []
for sigma in tqdm(sigmarange):
    s = rng.normal(loc=sigma, scale=Dsigma, size=(M,)*dim)
    s += sigma - np.mean(s)
    g = mct.beta_scaling_function (lam=0.74, sigma=s, M=M, dim=dim, alpha=0.1, blocks=100, store=True)
    g.solve_all()
    Bvalues.append(np.mean(g.phi[-50:,:,:]*np.power(g.t[-50:],-b)[:,None,None],axis=0))
```

The variance of the $B_\lambda(x)$ profiles (normalized by the absolute value of the mean) increases into the glass, as expected from the plots above.

```{code-cell} ipython3
Bvar = [np.std(Bx)/np.abs(np.mean(Bx)) for Bx in Bvalues]
plt.plot(sigmarange,Bvar)
plt.xlabel(r'$\sigma$')
plt.ylabel(r'$\text{var}(B)/|\text{mean}(B)|$')
plt.show()
```

Assuming that the Fourier transform of the B profiles (isotropically averaged) shows exponential decay at low q, we can extract a correlation length from that. The signal here is stil quite noisy, but there is a non-monotonic evolution of that correlation length.

```{code-cell} ipython3
def expfit(x, xi, A):
    return A*np.exp(-x*xi)
var=[]
for Bx in Bvalues:
    shape = Bx.shape
    dists=np.sqrt(np.fft.fftfreq(shape[0])[:,None]**2 + np.fft.fftfreq(shape[1])[None,:]**2)
    bins = np.arange(max(shape)/2+1)/float(max(shape))
    hd=np.histogram(dists,bins)[0]
    Bw = np.abs(np.fft.fft2(Bx))
    lin=np.histogram(dists,bins,weights=Bw)[0]/hd
    x=bins[:-1]+np.diff(bins)
    #plt.plot(x[1:],lin[1:]/np.max(lin))
    popt,_ = scipy.optimize.curve_fit(expfit,x[1:],lin[1:]/np.max(lin))
    #plt.plot(x[1:],expfit(x[1:],*popt),linestyle='dashed')
    var.append(popt[0])
plt.plot(sigmarange,np.array(var))
#x=np.arange(lin.shape[0])[1:]
#plt.plot(x,np.exp(-x*2))
#plt.plot(np.max(Blamw)*np.exp(-np.arange(hd.shape[0])))
plt.show()
```

```{code-cell} ipython3

```
